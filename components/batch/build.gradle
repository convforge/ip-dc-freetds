plugins {
    id 'maven-publish'
    id ("com.netflix.nebula.rpm") version "11.9.1"
}

group = 'com.gwt.ipdc'
version = '4.0.0'

ext {
    rpmIncludes = fileTree(dir: 'include', includes: [ '*.h' ])
    rpmLibraries = [
        fileTree(dir: "src/ctlib/.libs", include: "libct.so*"),
        fileTree(dir: "src/dblib/.libs", include: "libsybdb.so*")
    ]
}

apply from: "${System.getenv('CONV_ETC')}/build/gradle/build.gradle.rpm"

task autoconf(type:Exec) {
  workingDir '.'
  commandLine 'sh', 'autogen.sh'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}

task configure(type:Exec) {
  dependsOn 'autoconf'
  workingDir '.'
  commandLine './configure', '--prefix=/opt/conv'
  standardOutput = new ByteArrayOutputStream()
  ext.output = {
    return standardOutput.toString()
  }
}

task make(type:Exec) {
  dependsOn 'configure'
  workingDir '.'
  
  commandLine 'make', 'clean', 'all'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }

}

tasks.withType(Rpm).configureEach {
    requires('ip-dc-conversion-preinstall')
    release 'ipdc'
    user 'conv'
    group 'conv'
}

task packageDistribution(type: Zip) {
    from rpmIncludes
    archiveFileName  = "$name-$version-cpp-api-headers.zip"
    destinationDirectory = file("$buildDir/dist")
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "api"
                artifact packageDistribution
            }
        }
    }
}
