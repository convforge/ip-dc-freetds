plugins {
    id 'maven-publish'
    id 'cpp-library'
}

group = 'com.gwt.conversion'
version = '4.0.0'

ext {
}

task make(type:Exec) {
  workingDir '.'

  commandLine 'make', 'clean', 'all'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }

}

ext {
    sources = fileTree(dir: ".", includes: [
                            "mem.c",
                            "token.c",
                            "util.c",
                            "login.c",
                            "read.c ",
                            "write.c",
                            "convert.c",
                            "numeric.c",
                            "config.c",
                            "query.c",
                            "iconv.c",
                            "locale.c",
                            "vstrbuild.c",
                            "getmac.c",
                            "data.c",
                            "net.c ",
                            "tls.c ",
                            "tds_checks.c ",
                            "log.c ",
                            "bulk.c ",
                            "packet.c ",
                            "stream.c ",
                            "random.c ",
                            "sec_negotiate.c",
                            "sec_negotiate_gnutls.h",
                            "sec_negotiate_openssl.h",
                            "gssapi.c",
                            "sspi.c",
                            "challenge.c"
                        ])
    publicIncludes = "../../includes"
}

library {
    // Set the target operating system and architecture for this library
    targetMachines.add(machines.linux.x86_64)
    linkage = [Linkage.SHARED]
    
    source.from sources
    publicHeaders.from publicIncludes

    binaries.configureEach {
        def compileTask = compileTask.get()
        compileTask.source.from sources
        compileTask.includes {
            [ 
                ".",
                "../../include"
            ]
        }        
        if (toolChain instanceof VisualCpp) {
            compileTask.compilerArgs = ["/TC"]
        } else if (toolChain instanceof GccCompatibleToolChain) {
            compileTask.compilerArgs = ["-DLINUX_OS", "-x", "c"]
        }
    }

}
